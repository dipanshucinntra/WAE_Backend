"""
Django settings for bridge project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import pymysql
pymysql.install_as_MySQLdb()
from requests.adapters import HTTPAdapter, Retry

from datetime import datetime
import requests
import time
import json
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start vision_test settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mn1(um@%7zpkq2vi#yh^3&yx*q(asx9!dshy@=3qxkj!@@392_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition



INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'bridge',
    'Lead',
    'Employee',
    'Company',
    'Branch',
    'corsheaders',
    'Opportunity',
    'BusinessPartner',
    'Activity',
    'Countries',
    'Industries',
    'PaymentTermsTypes',
    'Quotation',
    'Order',
    'DraftOrder',
    'Item',
    'Category',
    'Notification',
    'Tender',
    'Invoice',
    'Campaign',
    'Project',
    'Attachment',
    'ClientBankDetails',
    'Amendment',
    'Payment',
    ### NEWLY ADD #####
    'Announcement',
    'Delivery',
    'DropDown',
    'Feedback',
    'Form',
    'Inspection',
    'ItemsPIR',
    'ServiceContract',
    'TenderQuotation',
    'Tickets',

    

]

# Use Django's standard `django.contrib.auth` permissions,
# or allow read-only access for unauthenticated users.

# REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': [
      #'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.AllowAny'
    # ]
# }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'bridge.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bridge.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'wae_pre',
        'USER': 'root',
        'PASSWORD': 'Mysql@123',
        'HOST': 'localhost',
        'PORT': '3306',
    }
	
}

SAPDB = {
        'CompanyDB': 'WEBPORTAL1',
        'UserName': 'manager',
        'Password': '1234'
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CORS_ORIGIN_ALLOW_ALL = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Custom Variables
BASEURL = "http://61.246.2.124:50001/b1s/v1"

SAP = False
SAPSP = False
SAPBP = False
SAPOPP = False
SAPQT = False
SAPORD = False
SAPURL = 'http://103.190.95.177:50001/b1s/v1'

def SAPSESSIONNEW(inp):
    if inp =="api":
        file = "bridge/db.json"
    else:
        file = "../bridge/db.json"
    with open(file) as f:
        db = f.read()
        data = json.loads(db)

    print(data)
    now = datetime.today()
    current_dtime = now.strftime("%Y-%m-%d %H:%M:%S")
    
    d1 = datetime.strptime(data['at'], '%Y-%m-%d %H:%M:%S')
    d2 = datetime.strptime(current_dtime, '%Y-%m-%d %H:%M:%S')

    diff = d2 - d1

    diff_minutes = (diff.days * 24 * 60) + (diff.seconds/60)
    #diff_minutes = diff_minutes+30

    session = requests.session()
    print(int(diff_minutes))
    print('dd', data['domain'])
    if diff_minutes < 25:
        #print("valid")
        session.cookies.set('B1SESSION', data['SessionId'], path='/', domain=data['domain'])
        #session.cookies.set('sapurl', data['sapurl'], path='/', domain='157.241.48.182')
        #return data
        return session

    else:
        #print("session expire")
        #ses = requests.post(data['sapurl']+'/Login', data=json.dumps(data), verify=False)
        
        requestSession = requests.Session()
        retry = Retry(total=5, connect=5, backoff_factor=0.5)
        print(retry)
        adapter = HTTPAdapter(max_retries=retry)
        print(adapter)
        requestSession.mount('http://', adapter)
        requestSession.mount('https://', adapter)
        ses = requestSession.post(data['sapurl']+'/Login', data=json.dumps(data), verify=False)
        print(ses.text)
        
        ses_json = json.loads(ses.text)
        #print("new ses id"+ses_json['SessionId'])
        #print("old data")
        #print(data)
        session.cookies.set('B1SESSION', ses_json['SessionId'], path='/', domain=data['domain'])
        #session.cookies.set('SAPURL', data['sapurl'], path='/', domain='157.241.48.182')
        data['SessionId'] = ses_json['SessionId']
        data['at'] = current_dtime
        
        #print("new data")
        #print(data)
        f = open(file, "w")
        f.write(json.dumps(data))
        f.close()
        #return data
        return session 

def CALLAPI(method,apiurl,calltype,data,maxitem=20):
        ses = SAPSESSIONNEW(calltype)
        requestSession = requests.Session()
        retry = Retry(total=5, connect=5, backoff_factor=0.5)
        adapter = HTTPAdapter(max_retries=retry)
        requestSession.mount('http://', adapter)
        requestSession.mount('https://', adapter)
        # <><><><><><<><><><><><><><><><><><><><><><><><><><>
        # <><><><><><<><><><><><><><><><><><><><><><><><><><>
        
        if method == "post" and data !="":
            res = requestSession.post(SAPURL+apiurl, data=json.dumps(data), cookies=ses.cookies, verify=False)
        elif method == "post" and data =="":
            res = requestSession.post(SAPURL+apiurl, cookies=ses.cookies, verify=False)
        elif method == "patch":
            res = requestSession.patch(SAPURL+apiurl, data=json.dumps(data), cookies=ses.cookies, verify=False)
        elif method == "delete":
            res = requestSession.delete(SAPURL+apiurl, cookies=ses.cookies, verify=False)
        else:
            print("SAPURL+apiurl")
            print(SAPURL+apiurl)
            #print(ses.cookies)            
            res = requestSession.get(SAPURL+apiurl, headers={"Prefer":"odata.maxpagesize="+str(maxitem)+""}, cookies=ses.cookies, verify=False)
        #ses_json = json.loads(ses.text)
        return res
        

def PAGE(json_data):
    arr={}
    try:
        if str(json_data['maxItem']).lower()=="all":
            endWith=None
            startWith=0
            arr['startWith'] = startWith
            arr['endWith'] = endWith
            return arr
        else:
            PageNo = json_data['PageNo']
            try:
                MaxItem = int(json_data['maxItem'])
            except:
                MaxItem = 10
            endWith = (PageNo * MaxItem)
            startWith = (endWith - MaxItem)

            arr['startWith'] = startWith
            arr['endWith'] = endWith
            return arr
    except Exception as e:
        print(str(e))
        return str(e)

def BYFIELD(argument, val, objs, table):
    if argument == "FromDate" and table in ["lead"]:
        return objs.filter(date__gte=val)
    elif argument == "ToDate" and table in ["lead"]:
        return objs.filter(date__lte=val)
    elif argument == "Source" and table in ["lead"]:
        return objs.filter(source=val)
    elif argument == "Status" and table in ["lead"]:
        return objs.filter(status=val)    
    elif argument == "FromDate" and table in ["quotation", "order", "invoice"]:
        return objs.filter(CreationDate__gte=val)
    elif argument == "ToDate" and table in ["quotation", "order", "invoice"]:
        return objs.filter(CreationDate__lte=val)
    elif argument == "CardCode" and table in ["order", "invoice", "businesspartner"]:
        return objs.filter(CardCode=val)
    elif argument == "CardName" and table in ["order", "invoice", "businesspartner"]:
        return objs.filter(CardName=val)
    elif argument == "CardType" and table in ["businesspartner"]:
        return objs.filter(CardType=val)
    elif argument == "DocEntry" and table in ["quotation", "order", "invoice"]:
        return objs.filter(DocEntry=val)
    elif argument == "FinalStatus" and table in ["quotation","order"]:
        return objs.filter(FinalStatus=val)
    else:
        return objs

def FILTER(json_data, objs, table):
    keys = {}
    for key in json_data:
        if json_data[key]!="":
            objs = BYFIELD(key, json_data[key], objs, table)
    return objs
